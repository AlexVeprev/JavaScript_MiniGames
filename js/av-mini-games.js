(function(){"use strict";function normalize(n,max,min){if(min===undefined){min=0}if(min>=max){throw Error("Impossible range: "+min+".."+max)}if(n>=max){return n-max+min}if(n<min){return n-min+max}return n}function areMatrixesEqual(matrix1,matrix2){for(var i=0;i<matrix1.length;i++){for(var j=0;j<matrix1[i].length;j++){if(matrix1[i][j]!==matrix2[i][j]){return false}}}return true}function GameOfLife(fieldSize,canvas,canvasSize,gridCheckbox,speedRange){var self=this;self.generation=[];self.canvas=canvas;self.size={};self.size.x=fieldSize.width;self.size.y=fieldSize.height;self.counter={};resetCounters();var callback={};self.generation=null;makeEmptyGeneration();var timer=null;var speed;self.setSpeed=function(){speed=2e3-speedRange.value;if(timer){self.stop();self.start()}};self.setSpeed();self.draw=function(){window.MatrixPainter.draw(self.canvas,self.generation,canvasSize.width,canvasSize.height,gridCheckbox.checked)};self.draw();self.resizeCanvas=function(newCanvasSize){canvasSize.width=newCanvasSize.width;canvasSize.height=newCanvasSize.height;self.draw()};function resetCounters(){self.counter.numberOfGenerations=undefined;self.counter.initialGeneration=undefined;self.counter.finalGeneration=undefined}function countGeneration(generation){var counter=0;for(var i=0;i<generation.length;i++){for(var j=0;j<generation[i].length;j++){counter+=generation[i][j]}}return counter}function gameOver(){self.stop();self.counter.finalGeneration=countGeneration(self.generation);callback.statistics(self.counter);resetCounters()}function makeEmptyGeneration(){var emptyGeneration=[];for(var i=0;i<self.size.y;i++){var row=[];for(var j=0;j<self.size.x;j++){row.push(0)}emptyGeneration.push(row)}self.generation=emptyGeneration}function makeRandomGeneration(probability){var randomGeneration=[];for(var i=0;i<self.size.y;i++){var row=[];for(var j=0;j<self.size.x;j++){row.push(Math.floor(Math.random()+probability))}randomGeneration.push(row)}self.generation=randomGeneration}function makeNewGeneration(){var newGeneration=[];if(self.counter.numberOfGenerations===undefined){self.counter.numberOfGenerations=0;self.counter.initialGeneration=countGeneration(self.generation);self.previousGeneration=undefined}self.counter.numberOfGenerations++;for(var y=0;y<self.size.y;y++){var row=[];for(var x=0;x<self.size.x;x++){var numOfActiveNeighbors=0;numOfActiveNeighbors+=self.generation[y][normalize(x-1,self.size.x)];numOfActiveNeighbors+=self.generation[y][normalize(x+1,self.size.x)];numOfActiveNeighbors+=self.generation[normalize(y-1,self.size.y)][x];numOfActiveNeighbors+=self.generation[normalize(y+1,self.size.y)][x];numOfActiveNeighbors+=self.generation[normalize(y-1,self.size.y)][normalize(x-1,self.size.x)];numOfActiveNeighbors+=self.generation[normalize(y-1,self.size.y)][normalize(x+1,self.size.x)];numOfActiveNeighbors+=self.generation[normalize(y+1,self.size.y)][normalize(x+1,self.size.x)];numOfActiveNeighbors+=self.generation[normalize(y+1,self.size.y)][normalize(x-1,self.size.x)];var currentCell=self.generation[y][x];if(numOfActiveNeighbors==3){currentCell=1}else if(numOfActiveNeighbors>3||numOfActiveNeighbors<2){currentCell=0}row.push(currentCell)}newGeneration.push(row)}if(callback.statistics){callback.statistics(self.counter)}if(areMatrixesEqual(newGeneration,self.generation)||self.previousGeneration&&areMatrixesEqual(newGeneration,self.previousGeneration)){if(self.previousGeneration&&areMatrixesEqual(newGeneration,self.previousGeneration)){self.counter.numberOfGenerations++}else if(countGeneration(newGeneration)===0){self.counter.numberOfGenerations--}self.previousGeneration=self.generation;self.generation=newGeneration;gameOver();return}self.previousGeneration=self.generation;self.generation=newGeneration}self.start=function(){if(timer){clearInterval(timer)}timer=setInterval(game.step,speed)};self.stop=function(){if(timer){clearInterval(timer);timer=null}};self.pause=self.stop;self.step=function(){makeNewGeneration();self.draw()};self.reset=function(){if(timer){clearInterval(timer);timer=null}resetCounters();callback.statistics(self.counter);makeEmptyGeneration();self.draw()};self.handleClick=function(x,y){var pos=window.MatrixPainter.getPositionFromCoord(x,y,self.generation,canvasSize.width,canvasSize.height);self.generation[pos.y][pos.x]=Math.abs(self.generation[pos.y][pos.x]-1);self.draw()};self.random=function(probability){makeRandomGeneration(probability);self.draw()};self.registerCallback=function(type,_callback){callback[type]=_callback}}window.GameOfLife=GameOfLife})();(function(){"use strict";function draw(canvas,matrix,width,height,shouldGridBeDrawn){var context=canvas.getContext("2d");canvas.width=width;canvas.height=height;var size={};size.x=matrix[0].length;size.y=matrix.length;var cell={};cell.width=width/size.x;cell.height=height/size.y;drawActiveElements();if(shouldGridBeDrawn){drawGrid()}function drawGrid(){context.strokeStyle="#777";for(var i=0;i<=size.x;i++){context.beginPath();context.moveTo(i*cell.width,0);context.lineTo(i*cell.width,height);context.stroke()}for(i=0;i<=size.y;i++){context.beginPath();context.moveTo(0,i*cell.height);context.lineTo(width,i*cell.height);context.stroke()}}function drawActiveElements(){context.clearRect(0,0,canvas.width,canvas.height);for(var i=0;i<size.x;i++){for(var j=0;j<size.y;j++){if(matrix[i][j]>=1){context.fillStyle="#403026";context.fillRect(j*cell.width,i*cell.height,cell.width,cell.height)}else if(matrix[i][j]<=-1){context.fillStyle="red";context.fillRect(j*cell.width,i*cell.height,cell.width,cell.height)}}}}}function getPositionFromCoord(x,y,matrix,width,height){var size={};size.x=matrix[0].length;size.y=matrix.length;var cell={};cell.width=width/size.x;cell.height=height/size.y;return{x:Math.floor(x/cell.width),y:Math.floor(y/cell.height)}}window.MatrixPainter={draw:draw,getPositionFromCoord:getPositionFromCoord}})();(function(){"use strict";function getRandomArbitrary(min,max){return Math.floor(Math.random()*(max-min)+min)}function replaceBiggerNeighbor(matrix){}function Snake(fieldSize,canvas,canvasSize,gridCheckbox){var self=this;var Direction=Object.freeze({UP:{x:0,y:-1,code:38},DOWN:{x:0,y:1,code:40},RIGHT:{x:1,y:0,code:39},LEFT:{x:-1,y:0,code:37}});self.width={};self.width.pixel=canvasSize.width;self.width.num=fieldSize.width;self.height={};self.height.pixel=canvasSize.height;self.height.num=fieldSize.height;var level;var getSpeed=function(){return Math.round(500*Math.pow(.9,level))};var directions=[];var timer=null;var field=[];var head={};initiate();var callback={};self.draw=function(){window.MatrixPainter.draw(canvas,field,canvasSize.width,canvasSize.height,gridCheckbox.checked)};self.draw();self.resizeCanvas=function(newCanvasSize){canvasSize.width=newCanvasSize.width;canvasSize.height=newCanvasSize.height;self.draw()};function initiate(){level=1;directions=[];initiateField();placeInitialSnake();placeFood()}function initiateField(){field=[];for(var y=0;y<self.height.num;y++){var row=[];for(var x=0;x<self.width.num;x++){row.push(0)}field.push(row)}}function placeInitialSnake(){head.x=Math.floor(self.width.num/2);head.y=Math.floor(self.height.num/2);head.direction=Direction.UP;field[head.y][head.x]=2;field[head.y+1][head.x]=1}function placeFood(){var x;var y;while(true){x=getRandomArbitrary(0,self.width.num);y=getRandomArbitrary(0,self.height.num);if(field[y][x]===0){field[y][x]=-1;break}}}function checkNewHeadPos(coord){if(coord.x<0||coord.x>=self.width.num||coord.y<0||coord.y>=self.height.num){return false}if(field[coord.y][coord.x]>0){return false}return true}self.step=function(){if(directions.length>0){head.direction=directions[0];directions.shift()}var newHeadPos={x:head.x+head.direction.x,y:head.y+head.direction.y};if(!checkNewHeadPos(newHeadPos)){gameOver();return}var food=Math.abs(field[newHeadPos.y][newHeadPos.x]);field[newHeadPos.y][newHeadPos.x]=field[head.y][head.x]+1;head.x=newHeadPos.x;head.y=newHeadPos.y;var x=head.x;var y=head.y;var direction;while(true){if(y-1>=0&&field[y-1][x]>0&&field[y-1][x]==field[y][x]-1){direction=Direction.UP}else if(y+1<self.height.num&&field[y+1][x]>0&&field[y+1][x]==field[y][x]-1){direction=Direction.DOWN}else if(x+1<self.width.num&&field[y][x+1]>0&&field[y][x+1]==field[y][x]-1){direction=Direction.RIGHT}else if(x-1>=0&&field[y][x-1]>0&&field[y][x-1]==field[y][x]-1){direction=Direction.LEFT}else{field[y][x]=food;break}field[y][x]=field[y+direction.y][x+direction.x]+food;y=y+direction.y;x=x+direction.x}if(food){placeFood();levelUp()}self.draw()};function levelUp(){level++;self.stop();self.start()}self.handleKeyDown=function(keyCode){var d;var ld=directions.length>0?directions[directions.length-1]:head.direction;for(var key in Direction){d=Direction[key];if(keyCode!=d.code){continue}if(d.x==ld.x&&d.y==ld.y||d.x==-ld.x&&d.y==-ld.y){continue}directions.push(Direction[key])}};function gameOver(){self.stop()}self.start=function(){if(timer){clearInterval(timer)}timer=setInterval(game.step,getSpeed())};self.stop=function(){if(timer){clearInterval(timer);timer=null}};self.pause=self.stop;self.reset=function(){initiate();if(timer){clearInterval(timer);timer=null}self.draw()};self.registerCallback=function(type,_callback){callback[type]=_callback}}window.Snake=Snake})();